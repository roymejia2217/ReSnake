---
description: Regla maestra de ReSnake - Contexto completo, an√°lisis obligatorio y mejores pr√°cticas
globs: **/*
alwaysApply: true
---

# REGLA MAESTRA - PROYECTO RESNAKE

## üö® PROTOCOLO OBLIGATORIO DE AN√ÅLISIS

### ANTES DE CUALQUIER ACCI√ìN EN EL PROYECTO:

#### 1. SEQUENTIAL THINKING - AN√ÅLISIS ESTRUCTURADO
```typescript
// ‚úÖ OBLIGATORIO PRIMERO: Analizar con pensamientos estructurados
mcp_sequential-thinking_sequentialthinking({
  thought: "An√°lisis inicial: ¬øQu√© necesito modificar y cu√°l es el impacto en la arquitectura ECS?",
  nextThoughtNeeded: true,
  thoughtNumber: 1,
  totalThoughts: 5
})

// Continuar con an√°lisis completo antes de proceder
```

#### 2. CONSULTA OBLIGATORIA AL GRAFO DE CONOCIMIENTO
```typescript
// ‚úÖ SIEMPRE EJECUTAR DESPU√âS de Sequential Thinking
mcp_memory_aim_read_graph({}) // Leer contexto completo
mcp_memory_aim_search_nodes({query: "componente_objetivo"}) // Buscar entidad espec√≠fica
```

#### 3. AN√ÅLISIS ARQUITECT√ìNICO MCP ADR
```typescript
// ‚úÖ OBLIGATORIO: Validar impacto arquitect√≥nico
mcp_adr-analysis_get_architectural_context({
  filePath: "src/path/to/file.ts",
  includeCompliance: true
})

// ‚úÖ OBLIGATORIO: Revisar ADRs existentes
mcp_adr-analysis_review_existing_adrs({
  adrDirectory: "docs/adrs",
  projectPath: "C:\\Users\\Roy\\Downloads\\ReSnake",
  analysisDepth: "comprehensive"
})
```

#### 4. SUPABASE MCP - SI APLICA A BASE DE DATOS
```typescript
// ‚úÖ OBLIGATORIO: Si modificas LeaderboardService o queries
mcp_supabase_list_tables({
  project_id: "project_id",
  schemas: ["public"]
})

mcp_supabase_execute_sql({
  project_id: "project_id",
  query: "SELECT * FROM leaderboard LIMIT 5"
})
```

#### 5. LECTURA OBLIGATORIA DE ARCHIVOS
**LEER COMPLETAMENTE antes de modificar:**
- `docs/adrs/001-ecs-architecture-decision.md` - Arquitectura ECS
- `docs/ARCHITECTURE_ANALYSIS.md` - An√°lisis completo
- `src/core/Engine.ts` - Motor del juego
- `src/main.ts` - Punto de entrada (888 l√≠neas)

## üéØ IDENTIDAD CR√çTICA DEL PROYECTO

### Datos Fundamentales
- **Nombre**: ReSnake
- **Arquitectura**: Entity-Component-System (ECS)
- **Puntuaci√≥n**: 9/10 (EXCELENTE - NO DEGRADAR)
- **Build Size**: ~8KB gzipped (CR√çTICO - NO EXCEDER)
- **Demo**: https://roymejia2217.github.io/ReSnake/
- **Grafo de Conocimiento**: 29 entidades, 44 relaciones

### Stack Tecnol√≥gico
- **TypeScript 5.3+** (configuraci√≥n estricta)
- **Vite 5.0+** (HMR, build optimizado)
- **Canvas API** (renderizado 2D de alto rendimiento)
- **Supabase** (leaderboard global)
- **GitHub Pages** (deploy autom√°tico)

## üèóÔ∏è ARQUITECTURA ECS - NO MODIFICAR SIN ENTENDER

### Estructura Fundamental
```
src/
‚îú‚îÄ‚îÄ components/     # Datos puros (Position, Velocity, Renderable, Collidable)
‚îú‚îÄ‚îÄ entities/       # Contenedores (Snake, Food)
‚îú‚îÄ‚îÄ systems/        # L√≥gica (Input, Movement, Collision, Render)
‚îú‚îÄ‚îÄ core/          # Motor (Engine.ts, types.ts)
‚îú‚îÄ‚îÄ services/      # Servicios (11 servicios especializados)
‚îî‚îÄ‚îÄ config/        # Configuraci√≥n centralizada
```

### Principios SOLID - OBLIGATORIOS
- **Single Responsibility**: Una responsabilidad por clase
- **Open/Closed**: Extensible sin modificar existente
- **Liskov Substitution**: Entidades intercambiables
- **Interface Segregation**: Componentes espec√≠ficos
- **Dependency Inversion**: Abstracciones, no implementaciones

## üéÆ FUNCIONALIDADES CR√çTICAS - PRESERVAR SIEMPRE

### Easter Egg Rom√°ntico (FUNCIONALIDAD √öNICA)
- **Activaci√≥n**: Puntuaci√≥n 69 en modo cl√°sico
- **Efectos**: Lluvia de corazones, mensajes especiales
- **Servicio**: RomanticEasterEggService
- **Integraci√≥n**: RenderSystem, ScoreService

### Sistema de Controles
- **Desktop**: Flechas + Espacio/P para pausa
- **M√≥vil**: Botones t√°ctiles + gestos swipe
- **Responsivo**: Adaptaci√≥n autom√°tica a pantallas

### Leaderboard Global
- **Backend**: Supabase con Row Level Security
- **Funcionalidad**: Puntuaciones globales, r√©cords
- **Sincronizaci√≥n**: Offline-first

## üîß SERVICIOS DEL PROYECTO (11 servicios)

### Servicios Principales
1. **ThemeService** - Temas claro/oscuro
2. **ScoreService** - Puntuaci√≥n y r√©cords
3. **LeaderboardService** - Integraci√≥n Supabase
4. **SoundService** - Efectos de sonido
5. **I18nService** - Internacionalizaci√≥n (es, en, it)
6. **RomanticEasterEggService** - Easter egg especial
7. **UserService** - Gesti√≥n de jugadores
8. **GameModeService** - Configuraci√≥n de modos
9. **MenuService** - Navegaci√≥n entre pantallas
10. **LogoService** - Logo din√°mico
11. **StorageService** - Persistencia local

## üìä M√âTRICAS CR√çTICAS - NO DEGRADAR

### Rendimiento
- **Build Size**: HTML (1.12KB) + CSS (1.60KB) + JS (5.32KB) = ~8KB gzipped
- **Tiempo de carga**: Instant√°neo
- **Navegadores**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+

### Arquitectura
- **Puntuaci√≥n**: 9/10 (EXCELENTE)
- **Entidades ECS**: 4 componentes + 2 entidades + 4 sistemas
- **Servicios**: 11 servicios especializados
- **ADRs**: 5 Architectural Decision Records

## üß† MCP KNOWLEDGE GRAPH - CONTEXTO PERSISTENTE

### Entidades en el Grafo (29 entidades)
**SIEMPRE consultar antes de modificar:**

#### Entidades Principales
- **ReSnake** (proyecto principal - 20 observaciones)
- **GameEngine** (motor del juego - 11 observaciones)
- **Snake** (entidad principal - 11 observaciones)
- **Food** (entidad de comida - 4 observaciones)

#### Sistemas ECS
- **InputSystem, MovementSystem, CollisionSystem, RenderSystem**

#### Componentes ECS
- **Position, Velocity, Renderable, Collidable**

#### Servicios (11 servicios)
- **ThemeService, ScoreService, LeaderboardService, SoundService**
- **I18nService, RomanticEasterEggService, UserService**
- **GameModeService, MenuService, LogoService**

#### Tecnolog√≠as
- **TypeScript, Vite, Canvas_API, Supabase, GitHub_Pages**

#### Patrones y Principios
- **ECS_Architecture** (9 observaciones)
- **SOLID_Principles** (9 observaciones)
- **Mobile_Support, Game_Modes**

### Relaciones Cr√≠ticas (44 relaciones)
**Entender impacto antes de modificar:**
```
ReSnake ‚Üí GameEngine (contains)
ReSnake ‚Üí Snake (contains)
ReSnake ‚Üí Food (contains)
GameEngine ‚Üí [InputSystem, MovementSystem, CollisionSystem, RenderSystem] (manages)
Snake ‚Üí [Position, Velocity, Renderable, Collidable] (uses)
Food ‚Üí [Position, Renderable, Collidable] (uses)
```

## üìö ADRs - DECISIONES ARQUITECT√ìNICAS

### ADRs Documentados (5 ADRs)
1. **ADR-001**: Arquitectura ECS
2. **ADR-002**: TypeScript estricto
3. **ADR-003**: Vite como build tool
4. **ADR-004**: Canvas API para renderizado
5. **ADR-005**: Supabase para leaderboard

**SIEMPRE consultar ADRs relevantes antes de cambios arquitect√≥nicos**

## ‚ö†Ô∏è REGLAS DE MODIFICACI√ìN ESTRICTAS

### PROHIBIDO ABSOLUTO
- ‚ùå Modificar c√≥digo sin Sequential Thinking previo (casos complejos)
- ‚ùå Modificar c√≥digo sin consultar el grafo de conocimiento
- ‚ùå Cambiar base de datos sin validar con Supabase MCP
- ‚ùå Romper la arquitectura ECS establecida
- ‚ùå Degradar la puntuaci√≥n del proyecto (9/10)
- ‚ùå Exceder el tama√±o de build (~8KB)
- ‚ùå Hardcodear valores (usar constants.ts)
- ‚ùå Ignorar principios SOLID
- ‚ùå Romper responsividad m√≥vil
- ‚ùå Da√±ar el Easter Egg rom√°ntico
- ‚ùå Omitir ADR Analysis en cambios arquitect√≥nicos

### OBLIGATORIO SIEMPRE
- ‚úÖ Sequential Thinking para an√°lisis complejo
- ‚úÖ Consultar grafo de conocimiento MCP
- ‚úÖ ADR Analysis para cambios arquitect√≥nicos
- ‚úÖ Supabase MCP para cambios de base de datos
- ‚úÖ Leer archivos completos antes de modificar
- ‚úÖ Mantener arquitectura ECS
- ‚úÖ Preservar funcionalidades cr√≠ticas
- ‚úÖ Usar TypeScript con tipado estricto
- ‚úÖ Seguir principios SOLID
- ‚úÖ Mantener responsividad m√≥vil
- ‚úÖ Preservar Easter Egg rom√°ntico
- ‚úÖ Documentar cambios arquitect√≥nicos

## üîç CHECKLIST OBLIGATORIO EXPANDIDO

### Pre-Modificaci√≥n (COMPLETAR TODOS)
- [ ] ‚úÖ **Sequential Thinking**: Analic√© con pensamientos estructurados
- [ ] ‚úÖ **Knowledge Graph**: Consult√© el grafo de conocimiento MCP
- [ ] ‚úÖ **ADR Analysis**: Revis√© ADRs relevantes
- [ ] ‚úÖ **Supabase MCP**: Valid√© esquema/queries (si aplica)
- [ ] ‚úÖ **Lectura**: Le√≠ completamente el archivo objetivo
- [ ] ‚úÖ **Arquitectura ECS**: Entend√≠ su rol en la arquitectura
- [ ] ‚úÖ **Relaciones**: Verifiqu√© relaciones con otros componentes
- [ ] ‚úÖ **Impacto**: Analic√© impacto en puntuaci√≥n del proyecto (9/10)

### Durante Modificaci√≥n
- [ ] ‚úÖ Mantuve arquitectura ECS
- [ ] ‚úÖ Preserv√© funcionalidades cr√≠ticas
- [ ] ‚úÖ Us√© TypeScript con tipado estricto
- [ ] ‚úÖ Segu√≠ principios SOLID
- [ ] ‚úÖ No hardcode√© valores
- [ ] ‚úÖ Mantuve responsividad m√≥vil
- [ ] ‚úÖ Valid√© queries con Supabase MCP (si aplica)

### Post-Modificaci√≥n (COMPLETAR TODOS)
- [ ] ‚úÖ **Knowledge Graph**: Actualic√© grafo de conocimiento
- [ ] ‚úÖ **ADR Analysis**: Ejecut√© an√°lisis MCP de validaci√≥n
- [ ] ‚úÖ **Supabase MCP**: Valid√© impacto en BD (si aplica)
- [ ] ‚úÖ **Sequential Thinking**: Reflexion√© sobre resultados
- [ ] ‚úÖ **Documentaci√≥n**: Document√© cambios significativos
- [ ] ‚úÖ **Puntuaci√≥n**: Verifiqu√© que se mantiene (9/10)
- [ ] ‚úÖ **Build Size**: Confirm√© que no excede ~8KB
- [ ] ‚úÖ **Testing**: Valid√© funcionalidad completa

## üéØ OBJETIVOS DEL PROYECTO

### Metas Principales
- Mantener arquitectura ECS s√≥lida y funcional
- Preservar rendimiento excelente (~8KB build)
- Mantener compatibilidad m√≥vil completa
- Expandir funcionalidades siguiendo patrones establecidos
- Preservar Easter Egg rom√°ntico √∫nico

### Futuras Mejoras Planificadas
- Tests unitarios para sistemas cr√≠ticos
- Progressive Web App (PWA)
- Modo multijugador
- Sistema de mods/plugins

## üöÄ COMANDOS CR√çTICOS

### Desarrollo
```bash
npm run dev      # Servidor de desarrollo con HMR
npm run build    # Build de producci√≥n
npm run preview  # Preview del build
```

### An√°lisis MCP
```bash
# Health check obligatorio
npx mcp-adr-analysis-server --test

# An√°lisis completo del proyecto
PROJECT_PATH=C:\Users\Roy\Downloads\ReSnake npx mcp-adr-analysis-server
```

### Configuraci√≥n MCP
```json
{
  "mcpServers": {
    "memory": {"command": "npx", "args": ["-y", "mcp-knowledge-graph"]},
    "mind-map": {"command": "npx", "args": ["-y", "mind-map-mcp"]},
    "adr-analysis": {"command": "npx", "args": ["-y", "mcp-adr-analysis-server"]},
    "sequential-thinking": {"command": "npx", "args": ["-y", "mcp-sequential-thinking"]},
    "supabase": {"command": "npx", "args": ["-y", "@modelcontextprotocol/server-supabase"]}
  }
}
```

---

## üéØ RECORDATORIO FINAL

**ESTE PROYECTO TIENE UNA ARQUITECTURA ECS EXCELENTE (9/10) CON UN GRAFO DE CONOCIMIENTO COMPLETO.**

**PROTOCOLO MCP ESTRICTO:**
1. **Sequential Thinking**: SIEMPRE para an√°lisis complejo - Pensar primero, actuar despu√©s
2. **Knowledge Graph**: SIEMPRE consultar antes de modificar - Fuente de verdad del contexto
3. **ADR Analysis**: SIEMPRE para cambios arquitect√≥nicos - Validar impacto
4. **Supabase MCP**: SIEMPRE para cambios de BD - Validar esquema y queries

**EL CONOCIMIENTO EST√Å PERSISTIDO Y DEBE SER LA FUENTE DE VERDAD PARA TODAS LAS DECISIONES.**

**NO MODIFICAR SIN:**
- ‚úÖ Completar Sequential Thinking (casos complejos)
- ‚úÖ Consultar el grafo de conocimiento
- ‚úÖ Validar con ADR Analysis (cambios arquitect√≥nicos)
- ‚úÖ Validar con Supabase MCP (cambios de BD)
- ‚úÖ Completar el checklist obligatorio expandido

**COMPRENDER PRIMERO, ACTUAR DESPU√âS.**

