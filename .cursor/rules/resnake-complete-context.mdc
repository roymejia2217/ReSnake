---
description: Regla completa de contexto para el proyecto ReSnake - Juego Snake con arquitectura ECS, TypeScript y an√°lisis MCP
globs: **/*
alwaysApply: true
---

# Regla Completa de Contexto - Proyecto ReSnake

## üéØ INFORMACI√ìN CR√çTICA DEL PROYECTO

### Identidad del Proyecto
- **Nombre**: ReSnake
- **Tipo**: Juego Snake moderno con arquitectura ECS
- **Versi√≥n**: 1.0.0
- **Licencia**: MIT
- **URL Demo**: https://roymejia2217.github.io/ReSnake/
- **Repositorio**: C:\Users\Roy\Downloads\ReSnake

### Stack Tecnol√≥gico Principal
- **Lenguaje**: TypeScript 5.3+ (configuraci√≥n estricta)
- **Build Tool**: Vite 5.0+ con HMR
- **Renderizado**: Canvas API nativo
- **Backend**: Supabase (leaderboard global)
- **Deploy**: GitHub Pages con CI/CD autom√°tico
- **Tama√±o Build**: ~8KB (gzipped)

## üèóÔ∏è ARQUITECTURA FUNDAMENTAL

### Patr√≥n ECS (Entity-Component-System) - CR√çTICO
**ANTES DE MODIFICAR CUALQUIER C√ìDIGO, ENTENDER:**

#### Entidades (src/entities/)
- **Snake**: Entidad principal del juego
  - Componentes: Position, Velocity, Renderable, Collidable
  - M√©todos clave: grow(), move(), checkSelfCollision()
  - Crecimiento suave con animaciones easing

- **Food**: Entidad de comida
  - Componentes: Position, Renderable, Collidable
  - Animaciones de pulsaci√≥n y efectos visuales

#### Componentes (src/components/)
- **Position**: Coordenadas X,Y con m√©todo equals()
- **Velocity**: Direcci√≥n y velocidad de movimiento
- **Renderable**: Propiedades de renderizado (color, estilo)
- **Collidable**: Marcado de entidades que pueden colisionar

#### Sistemas (src/systems/)
- **InputSystem**: Manejo de entrada (teclado, t√°ctil, gestos)
- **MovementSystem**: Procesamiento de movimiento con wrap-around
- **CollisionSystem**: Detecci√≥n de colisiones
- **RenderSystem**: Renderizado en Canvas con efectos visuales

#### Motor (src/core/)
- **GameEngine**: Game loop con requestAnimationFrame
- **Estados**: IDLE, PLAYING, PAUSED, GAME_OVER
- **M√©todos**: start(), pause(), resume(), stop()

## üìã PRINCIPIOS DE DISE√ëO OBLIGATORIOS

### SOLID Principles - SIEMPRE APLICAR
- **Single Responsibility**: Cada clase tiene una √∫nica responsabilidad
- **Open/Closed**: Abierto a extensi√≥n, cerrado a modificaci√≥n
- **Liskov Substitution**: Entidades intercambiables
- **Interface Segregation**: Componentes espec√≠ficos
- **Dependency Inversion**: Dependencia de abstracciones

### DRY y KISS
- **DRY**: No repetir c√≥digo, usar funciones reutilizables
- **KISS**: Soluciones simples y directas

### Composition over Inheritance
- Usar composici√≥n de componentes en lugar de herencia profunda

## üîß SERVICIOS DEL PROYECTO

### Servicios Principales (src/services/)
- **ThemeService**: Gesti√≥n de temas claro/oscuro
- **ScoreService**: Puntuaci√≥n y r√©cords
- **LeaderboardService**: Integraci√≥n con Supabase
- **SoundService**: Efectos de sonido (ap.mp3, end.mp3)
- **I18nService**: Internacionalizaci√≥n (es, en, it)
- **RomanticEasterEggService**: Easter egg especial (puntuaci√≥n 69)
- **UserService**: Gesti√≥n de jugadores
- **GameModeService**: Configuraci√≥n de modos de juego
- **MenuService**: Navegaci√≥n entre pantallas
- **LogoService**: Gesti√≥n del logo din√°mico

## üéÆ FUNCIONALIDADES ESPEC√çFICAS

### Modos de Juego
- **Cl√°sico**: Con colisiones de bordes
- **Sin bordes**: Wrap-around
- **Con obst√°culos**: Modo futuro

### Controles
- **Desktop**: Flechas del teclado, Espacio/P para pausa
- **M√≥vil**: Botones t√°ctiles + gestos swipe
- **Pausa**: Bot√≥n en pantalla o teclas

### Caracter√≠sticas Especiales
- **Easter Egg Rom√°ntico**: Activaci√≥n en puntuaci√≥n 69
- **Lluvia de corazones**: Efecto visual especial
- **Leaderboard global**: Con Supabase
- **Responsividad total**: Adaptaci√≥n a cualquier pantalla

## üìÅ ESTRUCTURA DE ARCHIVOS CR√çTICA

```
src/
‚îú‚îÄ‚îÄ components/     # Componentes ECS (Position, Velocity, Renderable, Collidable)
‚îú‚îÄ‚îÄ core/          # Motor del juego (Engine.ts, types.ts, gameTypes.ts)
‚îú‚îÄ‚îÄ entities/      # Entidades del juego (Entity.ts, Snake.ts, Food.ts)
‚îú‚îÄ‚îÄ systems/       # Sistemas ECS (Input, Movement, Collision, Render)
‚îú‚îÄ‚îÄ services/      # Servicios auxiliares (11 servicios)
‚îú‚îÄ‚îÄ config/        # Configuraci√≥n (constants.ts, supabase.ts)
‚îú‚îÄ‚îÄ utils/         # Utilidades (helpers.ts, AnimationHelper.ts)
‚îî‚îÄ‚îÄ styles/        # Estilos CSS (main.css)
```

## üß† MCP KNOWLEDGE GRAPH - CONTEXTO PERSISTENTE

### Grafo de Conocimiento Activo
- **29 entidades** en el grafo de conocimiento
- **44 relaciones** entre componentes
- **Servidores MCP**: memory, mind-map, adr-analysis
- **ADRs**: 5 Architectural Decision Records documentados

### Consultas Disponibles
```typescript
// Consultar entidades del proyecto
mcp_memory_aim_search_nodes({query: "Snake"})
mcp_memory_aim_open_nodes({names: ["GameEngine", "ECS_Architecture"]})
```

## üìä AN√ÅLISIS ARQUITECT√ìNICO

### Puntuaci√≥n del Proyecto: 9/10
- **Dise√±o**: Excelente (ECS bien implementado)
- **Tecnolog√≠as**: Modernas y apropiadas
- **Mantenibilidad**: Muy buena
- **Rendimiento**: Excelente
- **Seguridad**: Buena
- **Escalabilidad**: Muy buena

### M√©tricas de Rendimiento
- **Build Size**: HTML (1.12KB) + CSS (1.60KB) + JS (5.32KB) = ~8KB gzipped
- **Tiempo de carga**: Instant√°neo
- **Navegadores soportados**: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+

## ‚ö†Ô∏è REGLAS DE MODIFICACI√ìN DE C√ìDIGO

### ANTES DE MODIFICAR CUALQUIER ARCHIVO:

1. **LEER COMPLETAMENTE** el archivo y entender su prop√≥sito en la arquitectura ECS
2. **CONSULTAR** el grafo de conocimiento para entender relaciones
3. **VERIFICAR** que la modificaci√≥n respeta los principios SOLID
4. **MANTENER** la separaci√≥n entre componentes, sistemas y entidades
5. **PRESERVAR** la funcionalidad existente
6. **DOCUMENTAR** cambios significativos

### PATRONES PROHIBIDOS:
- ‚ùå Modificar la estructura ECS sin justificaci√≥n
- ‚ùå Hardcodear valores en lugar de usar constants.ts
- ‚ùå Crear dependencias circulares entre servicios
- ‚ùå Romper la separaci√≥n de responsabilidades
- ‚ùå Ignorar el tipado estricto de TypeScript

### PATRONES OBLIGATORIOS:
- ‚úÖ Usar TypeScript con tipado estricto
- ‚úÖ Seguir la arquitectura ECS establecida
- ‚úÖ Mantener servicios singleton reutilizables
- ‚úÖ Usar configuraci√≥n centralizada en constants.ts
- ‚úÖ Implementar manejo de errores apropiado
- ‚úÖ Preservar responsividad m√≥vil

## üé® CONVENCIONES DE C√ìDIGO

### Naming Conventions
- **Clases**: PascalCase (GameEngine, Snake)
- **M√©todos**: camelCase (startNewGame, handleFoodEaten)
- **Constantes**: UPPER_SNAKE_CASE (GAME_CONFIG, DIRECTIONS)
- **Archivos**: PascalCase para clases (Snake.ts, Food.ts)

### Estructura de Archivos
- **Imports**: Siempre usar paths absolutos con @/
- **Exports**: Named exports preferidos
- **Comentarios**: JSDoc para clases y m√©todos p√∫blicos

## üîç DEBUGGING Y TESTING

### Comandos de Desarrollo
```bash
npm run dev      # Servidor de desarrollo con HMR
npm run build    # Build de producci√≥n
npm run preview  # Preview del build
```

### An√°lisis MCP
```bash
# Health check del servidor ADR
npx mcp-adr-analysis-server --test

# An√°lisis completo del proyecto
PROJECT_PATH=C:\Users\Roy\Downloads\ReSnake npx mcp-adr-analysis-server
```

## üìö DOCUMENTACI√ìN CR√çTICA

### Archivos de Documentaci√≥n
- `docs/adrs/` - Architectural Decision Records
- `docs/ARCHITECTURE_ANALYSIS.md` - An√°lisis completo
- `docs/MCP_SETUP.md` - Configuraci√≥n MCP
- `README.md` - Documentaci√≥n principal

### ADRs Documentados
1. **ADR-001**: Arquitectura ECS
2. **ADR-002**: TypeScript estricto
3. **ADR-003**: Vite como build tool
4. **ADR-004**: Canvas API para renderizado
5. **ADR-005**: Supabase para leaderboard

## üöÄ FLUJO DE DESARROLLO

### Para Nuevas Funcionalidades:
1. **Analizar** si requiere nuevo componente, sistema o entidad
2. **Consultar** el grafo de conocimiento para entender impacto
3. **Seguir** el patr√≥n ECS establecido
4. **Mantener** compatibilidad con servicios existentes
5. **Documentar** la decisi√≥n en ADR si es significativa

### Para Correcciones:
1. **Identificar** el sistema/componente responsable
2. **Preservar** la arquitectura ECS
3. **Verificar** que no afecta otros sistemas
4. **Mantener** la responsividad m√≥vil

## üíæ PERSISTENCIA Y CONFIGURACI√ìN

### Configuraci√≥n MCP
```json
{
  "mcpServers": {
    "memory": { "command": "npx", "args": ["-y", "mcp-knowledge-graph"] },
    "mind-map": { "command": "npx", "args": ["-y", "mind-map-mcp"] },
    "adr-analysis": { "command": "npx", "args": ["-y", "mcp-adr-analysis-server"] }
  }
}
```

### Variables de Entorno
- `PROJECT_PATH`: C:\Users\Roy\Downloads\ReSnake
- `ADR_DIRECTORY`: docs/adrs
- `LOG_LEVEL`: INFO
- `CACHE_ENABLED`: true

## üéØ OBJETIVOS DEL PROYECTO

### Metas Principales
- Mantener arquitectura ECS s√≥lida
- Preservar rendimiento excelente (~8KB)
- Mantener compatibilidad m√≥vil completa
- Expandir funcionalidades siguiendo patrones establecidos

### Futuras Mejoras Planificadas
- Tests unitarios para sistemas cr√≠ticos
- Progressive Web App (PWA)
- Modo multijugador
- Sistema de mods/plugins

---

**‚ö†Ô∏è RECORDATORIO CR√çTICO**: Este proyecto tiene una arquitectura ECS bien definida y un grafo de conocimiento activo. SIEMPRE consultar el contexto completo antes de hacer modificaciones. El conocimiento est√° persistido en el sistema MCP y debe ser consultado para entender el impacto de cualquier cambio.

