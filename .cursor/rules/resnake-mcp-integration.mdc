---
description: Regla de integraci√≥n MCP para ReSnake - uso estricto de grafo de conocimiento, an√°lisis arquitect√≥nico, Supabase y Sequential Thinking
globs: **/*
alwaysApply: true
---

# Integraci√≥n MCP - Proyecto ReSnake

## üß† PROTOCOLO ESTRICTO DE USO MCP

### OBLIGATORIO: Sequential Thinking ANTES de Cualquier Acci√≥n
**SIEMPRE usar Sequential Thinking para analizar problemas complejos:**

```typescript
// ‚úÖ OBLIGATORIO: Usar Sequential Thinking para decisiones complejas
mcp_sequential-thinking_sequentialthinking({
  thought: "An√°lisis del impacto de modificar [componente]...",
  nextThoughtNeeded: true,
  thoughtNumber: 1,
  totalThoughts: 5
})

// Continuar con pensamientos estructurados hasta completar el an√°lisis
// SOLO despu√©s de completar el an√°lisis proceder con modificaciones
```

### Cu√°ndo Usar Sequential Thinking (OBLIGATORIO)
1. **An√°lisis de arquitectura**: Antes de modificar componentes ECS
2. **Decisiones arquitect√≥nicas**: Nuevas funcionalidades o cambios estructurales
3. **Debugging complejo**: Problemas que afectan m√∫ltiples sistemas
4. **Optimizaci√≥n**: Mejoras de rendimiento que impactan varios componentes
5. **Refactoring**: Cambios que afectan la arquitectura ECS

### Contexto Persistente Activo - MCP KNOWLEDGE GRAPH
**DESPU√âS de Sequential Thinking, SIEMPRE consultar:**

```typescript
// ‚úÖ OBLIGATORIO: Consultar entidades relacionadas
mcp_memory_aim_search_nodes({query: "Snake"})
mcp_memory_aim_open_nodes({names: ["GameEngine", "ECS_Architecture"]})

// ‚úÖ OBLIGATORIO: Verificar relaciones antes de cambios
mcp_memory_aim_read_graph({})
```

### Entidades del Grafo de Conocimiento (29 entidades)
**SIEMPRE considerar estas entidades en el an√°lisis:**

#### Entidades Principales
- **ReSnake** (proyecto principal)
- **GameEngine** (motor del juego)
- **Snake** (entidad principal)
- **Food** (entidad de comida)

#### Sistemas ECS
- **InputSystem, MovementSystem, CollisionSystem, RenderSystem**

#### Componentes ECS
- **Position, Velocity, Renderable, Collidable**

#### Servicios
- **ThemeService, ScoreService, LeaderboardService, SoundService**
- **I18nService, RomanticEasterEggService, UserService**
- **GameModeService, MenuService, LogoService**

#### Tecnolog√≠as
- **TypeScript, Vite, Canvas_API, Supabase, GitHub_Pages**

#### Patrones y Principios
- **ECS_Architecture, SOLID_Principles**
- **Mobile_Support, Game_Modes**

## üîó RELACIONES CR√çTICAS (44 relaciones)

### Relaciones Principales a Considerar
```typescript
// ‚úÖ OBLIGATORIO: Entender estas relaciones antes de modificar
ReSnake ‚Üí GameEngine (contains)
ReSnake ‚Üí Snake (contains)
ReSnake ‚Üí Food (contains)
GameEngine ‚Üí InputSystem (manages)
GameEngine ‚Üí MovementSystem (manages)
GameEngine ‚Üí CollisionSystem (manages)
GameEngine ‚Üí RenderSystem (manages)
Snake ‚Üí Position (uses)
Snake ‚Üí Velocity (uses)
Snake ‚Üí Renderable (uses)
Snake ‚Üí Collidable (uses)
```

### Relaciones de Servicios
```typescript
// ‚úÖ OBLIGATORIO: Considerar impacto en servicios
ScoreService ‚Üí MovementSystem (influences)
LeaderboardService ‚Üí Supabase (connects_to)
ThemeService ‚Üí RenderSystem (affects)
I18nService ‚Üí RenderSystem (provides_text_for)
RomanticEasterEggService ‚Üí RenderSystem (enhances)
RomanticEasterEggService ‚Üí ScoreService (monitors)
```

## üìä AN√ÅLISIS ARQUITECT√ìNICO MCP

### Puntuaci√≥n del Proyecto: 9/10
**SIEMPRE mantener esta puntuaci√≥n:**
- **Dise√±o**: Excelente (ECS bien implementado)
- **Tecnolog√≠as**: Modernas y apropiadas
- **Mantenibilidad**: Muy buena
- **Rendimiento**: Excelente
- **Seguridad**: Buena
- **Escalabilidad**: Muy buena

### M√©tricas Cr√≠ticas
- **Build Size**: ~8KB (gzipped) - NO EXCEDER
- **Entidades en Grafo**: 29
- **Relaciones**: 44
- **ADRs**: 5 Architectural Decision Records

## üéØ CONSULTAS MCP OBLIGATORIAS

### Antes de Modificar Cualquier Archivo
```typescript
// 1. Consultar entidades relacionadas
const relatedEntities = await mcp_memory_aim_search_nodes({
  query: "nombre_del_componente_o_servicio"
});

// 2. Abrir entidades espec√≠ficas
const entities = await mcp_memory_aim_open_nodes({
  names: ["GameEngine", "ECS_Architecture", "SOLID_Principles"]
});

// 3. Leer grafo completo para contexto
const fullGraph = await mcp_memory_aim_read_graph({});
```

### Antes de Agregar Nueva Funcionalidad
```typescript
// 1. Buscar patrones existentes
const patterns = await mcp_memory_aim_search_nodes({
  query: "patr√≥n_a_implementar"
});

// 2. Verificar compatibilidad con arquitectura ECS
const ecsInfo = await mcp_memory_aim_open_nodes({
  names: ["ECS_Architecture", "SOLID_Principles"]
});
```

## üìö ADRS (ARCHITECTURAL DECISION RECORDS)

### ADRs Documentados - SIEMPRE CONSULTAR
1. **ADR-001**: Implementaci√≥n de Arquitectura ECS
2. **ADR-002**: Configuraci√≥n Estricta de TypeScript
3. **ADR-003**: Vite como Sistema de Build
4. **ADR-004**: Canvas API para Renderizado
5. **ADR-005**: Supabase para Leaderboard Global

### Proceso para Nuevas Decisiones
```typescript
// ‚úÖ OBLIGATORIO: Para cambios arquitect√≥nicos significativos
// 1. Consultar ADRs existentes
// 2. Evaluar impacto en arquitectura ECS
// 3. Documentar nueva decisi√≥n como ADR
// 4. Actualizar grafo de conocimiento
```

## üîç AN√ÅLISIS MCP AUTOM√ÅTICO

### Comandos de An√°lisis
```bash
# ‚úÖ OBLIGATORIO: Health check antes de cambios
npx mcp-adr-analysis-server --test

# ‚úÖ OBLIGATORIO: An√°lisis completo del proyecto
PROJECT_PATH=C:\Users\Roy\Downloads\ReSnake npx mcp-adr-analysis-server

# ‚úÖ OBLIGATORIO: Configuraci√≥n del servidor
PROJECT_PATH=C:\Users\Roy\Downloads\ReSnake
ADR_DIRECTORY=docs/adrs
LOG_LEVEL=INFO
CACHE_ENABLED=true
```

### Cache y Performance
- **Cache Directory**: .mcp-adr-cache
- **Max Cache Size**: 100MB
- **Analysis Timeout**: 30000ms
- **Cache Enabled**: true (por defecto)

## üéÆ CONTEXTO ESPEC√çFICO DEL JUEGO

### Funcionalidades Cr√≠ticas en el Grafo
```typescript
// ‚úÖ OBLIGATORIO: Preservar estas funcionalidades
const criticalFeatures = [
  "RomanticEasterEggService", // Easter Egg en puntuaci√≥n 69
  "Mobile_Support", // Soporte m√≥vil completo
  "Game_Modes", // M√∫ltiples modos de juego
  "Canvas_API", // Renderizado de alto rendimiento
  "Supabase", // Leaderboard global
  "GitHub_Pages" // Deploy autom√°tico
];
```

### Easter Egg Rom√°ntico - FUNCIONALIDAD CR√çTICA
```typescript
// ‚úÖ OBLIGATORIO: Preservar Easter Egg
// Entidad: RomanticEasterEggService
// Activaci√≥n: Puntuaci√≥n 69 en modo cl√°sico
// Efectos: Lluvia de corazones, mensajes especiales
// Relaciones: enhance RenderSystem, monitor ScoreService
```

## üîß INTEGRACI√ìN CON SERVICIOS MCP

### Servidores MCP Activos
```json
{
  "mcpServers": {
    "memory": {
      "command": "npx",
      "args": ["-y", "mcp-knowledge-graph", "--memory-path", "C:\\Users\\Roy\\.aim\\"]
    },
    "mind-map": {
      "command": "npx", 
      "args": ["-y", "mind-map-mcp"]
    },
    "adr-analysis": {
      "command": "npx",
      "args": ["-y", "mcp-adr-analysis-server"]
    },
    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "mcp-sequential-thinking"]
    },
    "supabase": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-supabase"]
    }
  }
}
```

### Flujo de Trabajo MCP ESTRICTO
1. **Sequential Thinking** - Analizar problema con pensamientos estructurados
2. **Consultar grafo de conocimiento** - Entender contexto y relaciones
3. **ADR Analysis** - Analizar impacto arquitect√≥nico
4. **Supabase MCP** - Validar esquema y consultas de base de datos
5. **Actualizar conocimiento** - Persistir cambios en el grafo
6. **Validar decisiones** - Contra ADRs y arquitectura ECS

## üóÑÔ∏è SUPABASE MCP - INTEGRACI√ìN OBLIGATORIA

### ANTES de Modificar LeaderboardService o Queries
**SIEMPRE usar Supabase MCP para validar:**

```typescript
// ‚úÖ OBLIGATORIO: Buscar documentaci√≥n de Supabase
mcp_supabase_search_docs({
  graphql_query: `
    query SearchSupabaseDocs {
      searchDocs(query: "row level security policies", limit: 5) {
        nodes {
          title
          href
          content
        }
      }
    }
  `
})

// ‚úÖ OBLIGATORIO: Listar proyectos disponibles
mcp_supabase_list_projects({})

// ‚úÖ OBLIGATORIO: Obtener detalles del proyecto
mcp_supabase_get_project({
  id: "project_id"
})

// ‚úÖ OBLIGATORIO: Listar tablas existentes
mcp_supabase_list_tables({
  project_id: "project_id",
  schemas: ["public"]
})

// ‚úÖ OBLIGATORIO: Ejecutar SQL para validar queries
mcp_supabase_execute_sql({
  project_id: "project_id",
  query: "SELECT * FROM leaderboard ORDER BY score DESC LIMIT 10"
})
```

### Casos de Uso Obligatorios de Supabase MCP

#### 1. Validaci√≥n de Esquema de Base de Datos
```typescript
// ‚úÖ OBLIGATORIO: Antes de crear/modificar tablas
mcp_supabase_list_tables({
  project_id: "project_id",
  schemas: ["public"]
})

// ‚úÖ OBLIGATORIO: Aplicar migraciones con validaci√≥n
mcp_supabase_apply_migration({
  project_id: "project_id",
  name: "add_leaderboard_table",
  query: `
    CREATE TABLE IF NOT EXISTS leaderboard (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      player_name TEXT NOT NULL,
      score INTEGER NOT NULL,
      mode TEXT NOT NULL,
      created_at TIMESTAMPTZ DEFAULT NOW()
    );
  `
})
```

#### 2. Validaci√≥n de Row Level Security (RLS)
```typescript
// ‚úÖ OBLIGATORIO: Verificar pol√≠ticas RLS
mcp_supabase_get_advisors({
  project_id: "project_id",
  type: "security"
})

// ‚úÖ OBLIGATORIO: Validar pol√≠ticas antes de deploy
mcp_supabase_execute_sql({
  project_id: "project_id",
  query: `
    SELECT * FROM pg_policies 
    WHERE tablename = 'leaderboard';
  `
})
```

#### 3. Optimizaci√≥n de Queries
```typescript
// ‚úÖ OBLIGATORIO: Analizar rendimiento de queries
mcp_supabase_get_advisors({
  project_id: "project_id",
  type: "performance"
})

// ‚úÖ OBLIGATORIO: Validar √≠ndices
mcp_supabase_execute_sql({
  project_id: "project_id",
  query: `
    SELECT * FROM pg_indexes 
    WHERE tablename = 'leaderboard';
  `
})
```

#### 4. Generaci√≥n de TypeScript Types
```typescript
// ‚úÖ OBLIGATORIO: Generar tipos despu√©s de cambios de esquema
mcp_supabase_generate_typescript_types({
  project_id: "project_id"
})

// Aplicar tipos generados en src/config/supabase.ts
```

## üìê ADR ANALYSIS MCP - USO ESTRICTO EXPANDIDO

### ANTES de Cambios Arquitect√≥nicos
**SIEMPRE usar ADR Analysis para validar:**

```typescript
// ‚úÖ OBLIGATORIO: An√°lisis del ecosistema del proyecto
mcp_adr-analysis_analyze_project_ecosystem({
  projectPath: "C:\\Users\\Roy\\Downloads\\ReSnake",
  analysisDepth: "comprehensive",
  enhancedMode: true,
  knowledgeEnhancement: true,
  conversationContext: {
    userGoals: ["Mantener arquitectura ECS", "Optimizar rendimiento"],
    constraints: ["Build size ~8KB", "TypeScript estricto"],
    focusAreas: ["ECS", "performance", "maintainability"]
  }
})

// ‚úÖ OBLIGATORIO: Obtener contexto arquitect√≥nico
mcp_adr-analysis_get_architectural_context({
  filePath: "src/entities/Snake.ts",
  includeCompliance: true,
  conversationContext: {
    userGoals: ["Modificar comportamiento de Snake"],
    previousContext: "An√°lisis de arquitectura ECS"
  }
})

// ‚úÖ OBLIGATORIO: Revisar ADRs existentes
mcp_adr-analysis_review_existing_adrs({
  adrDirectory: "docs/adrs",
  projectPath: "C:\\Users\\Roy\\Downloads\\ReSnake",
  analysisDepth: "comprehensive",
  generateUpdatePlan: true
})

// ‚úÖ OBLIGATORIO: Sugerir nuevos ADRs para cambios significativos
mcp_adr-analysis_suggest_adrs({
  analysisType: "comprehensive",
  projectPath: "C:\\Users\\Roy\\Downloads\\ReSnake",
  conversationContext: {
    userGoals: ["A√±adir nueva funcionalidad"],
    constraints: ["Mantener arquitectura ECS", "No exceder 8KB"]
  }
})
```

### Validaci√≥n de Deployment
```typescript
// ‚úÖ OBLIGATORIO: Antes de push a producci√≥n
mcp_adr-analysis_deployment_readiness({
  operation: "check_readiness",
  projectPath: "C:\\Users\\Roy\\Downloads\\ReSnake",
  targetEnvironment: "production",
  strictMode: true,
  blockOnFailingTests: true,
  requireAdrCompliance: true
})

// ‚úÖ OBLIGATORIO: An√°lisis de progreso
mcp_adr-analysis_compare_adr_progress({
  adrDirectory: "docs/adrs",
  todoPath: "TODO.md",
  deepCodeAnalysis: true,
  functionalValidation: true,
  environmentValidation: true
})
```

### An√°lisis de Seguridad
```typescript
// ‚úÖ OBLIGATORIO: Antes de commit de c√≥digo sensible
mcp_adr-analysis_analyze_content_security({
  content: "[c√≥digo_a_analizar]",
  contentType: "code",
  enhancedMode: true,
  enableMemoryIntegration: true
})
```

## üìä M√âTRICAS DE CONOCIMIENTO

### Entidades por Tipo
- **project**: 1 (ReSnake)
- **core_system**: 1 (GameEngine)
- **entity**: 2 (Snake, Food)
- **system**: 4 (Input, Movement, Collision, Render)
- **service**: 11 (todos los servicios)
- **component**: 4 (Position, Velocity, Renderable, Collidable)
- **technology**: 4 (TypeScript, Vite, Canvas_API, Supabase)
- **deployment**: 1 (GitHub_Pages)
- **architecture_pattern**: 1 (ECS_Architecture)
- **design_principles**: 1 (SOLID_Principles)
- **feature**: 2 (Mobile_Support, Game_Modes)

### Observaciones por Entidad
- **ReSnake**: 20 observaciones (proyecto principal)
- **GameEngine**: 11 observaciones (motor cr√≠tico)
- **Snake**: 11 observaciones (entidad principal)
- **ECS_Architecture**: 9 observaciones (patr√≥n fundamental)
- **SOLID_Principles**: 9 observaciones (principios de dise√±o)

## ‚ö†Ô∏è REGLAS DE USO MCP ESTRICTAS

### Obligatorio ANTES de Modificar C√≥digo
1. **Sequential Thinking** - Analizar con pensamientos estructurados
2. **Consultar entidades relacionadas** en el grafo de conocimiento
3. **Verificar relaciones** que pueden verse afectadas
4. **ADR Analysis** - Revisar ADRs para decisiones arquitect√≥nicas
5. **Supabase MCP** - Validar esquema y queries (si aplica)
6. **Analizar impacto** en la puntuaci√≥n del proyecto (9/10)

### Obligatorio DESPU√âS de Cambios Significativos
1. **Actualizar observaciones** de entidades modificadas en el grafo
2. **Crear nuevas relaciones** si es necesario
3. **Documentar decisiones** como ADR si es arquitect√≥nico
4. **Ejecutar an√°lisis MCP** para validar cambios
5. **Supabase MCP** - Validar impacto en base de datos (si aplica)
6. **Sequential Thinking** - Reflexionar sobre resultados

### Prohibido ABSOLUTAMENTE
- ‚ùå Modificar c√≥digo sin Sequential Thinking previo para casos complejos
- ‚ùå Modificar c√≥digo sin consultar el grafo de conocimiento
- ‚ùå Ignorar relaciones existentes entre entidades
- ‚ùå Cambiar esquema de Supabase sin validaci√≥n MCP
- ‚ùå Romper la arquitectura ECS documentada
- ‚ùå Disminuir la puntuaci√≥n del proyecto (9/10)
- ‚ùå Omitir ADR Analysis en cambios arquitect√≥nicos

## üéØ CHECKLIST MCP OBLIGATORIO EXPANDIDO

### Pre-Modificaci√≥n (OBLIGATORIO COMPLETAR TODOS)
- [ ] ‚úÖ **Sequential Thinking**: Analic√© el problema con pensamientos estructurados
- [ ] ‚úÖ **Knowledge Graph**: Consult√© el grafo de conocimiento
- [ ] ‚úÖ **Entidades**: Identifiqu√© entidades relacionadas
- [ ] ‚úÖ **Relaciones**: Verifiqu√© relaciones que se ver√°n afectadas
- [ ] ‚úÖ **ADR Analysis**: Revis√© ADRs relevantes
- [ ] ‚úÖ **Supabase MCP**: Valid√© esquema y queries (si aplica a base de datos)
- [ ] ‚úÖ **Impacto**: Analic√© impacto arquitect√≥nico completo
- [ ] ‚úÖ **ECS**: Verifiqu√© compatibilidad con arquitectura ECS

### Durante Modificaci√≥n
- [ ] ‚úÖ **Arquitectura**: Mantuve la arquitectura ECS intacta
- [ ] ‚úÖ **SOLID**: Apliqu√© principios SOLID
- [ ] ‚úÖ **TypeScript**: Us√© tipado estricto
- [ ] ‚úÖ **Performance**: No degrad√© el rendimiento (~8KB build)
- [ ] ‚úÖ **Supabase**: Us√© MCP para validar queries (si aplica)

### Post-Modificaci√≥n (OBLIGATORIO COMPLETAR TODOS)
- [ ] ‚úÖ **Knowledge Graph**: Actualic√© observaciones en el grafo
- [ ] ‚úÖ **Relaciones**: Cre√© nuevas relaciones si es necesario
- [ ] ‚úÖ **ADR**: Document√© decisiones arquitect√≥nicas
- [ ] ‚úÖ **ADR Analysis**: Ejecut√© an√°lisis MCP de validaci√≥n
- [ ] ‚úÖ **Supabase MCP**: Valid√© impacto en base de datos (si aplica)
- [ ] ‚úÖ **Sequential Thinking**: Reflexion√© sobre resultados
- [ ] ‚úÖ **Puntuaci√≥n**: Mantuve puntuaci√≥n del proyecto (9/10)
- [ ] ‚úÖ **Deployment**: Valid√© readiness si aplica a producci√≥n

## üìã MATRIZ DE DECISI√ìN MCP

### ¬øCu√°ndo usar cada MCP?

| Escenario | Sequential Thinking | Knowledge Graph | ADR Analysis | Supabase MCP |
|-----------|---------------------|-----------------|--------------|--------------|
| Modificar componente ECS | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚ùå No aplica |
| A√±adir nueva entidad | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚ùå No aplica |
| Modificar LeaderboardService | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio |
| Cambiar esquema de BD | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio |
| Optimizar query SQL | ‚úÖ Recomendado | ‚úÖ Obligatorio | ‚úÖ Recomendado | ‚úÖ Obligatorio |
| Refactoring c√≥digo | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚ö†Ô∏è Si afecta BD |
| Bug fix simple | ‚ö†Ô∏è Opcional | ‚úÖ Obligatorio | ‚ö†Ô∏è Recomendado | ‚ùå No aplica |
| Deployment a producci√≥n | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio | ‚úÖ Obligatorio |

## üîÑ FLUJO DE TRABAJO COMPLETO CON MCPs

### Ejemplo: Modificar Snake Entity

```typescript
// PASO 1: Sequential Thinking - An√°lisis inicial
mcp_sequential-thinking_sequentialthinking({
  thought: "Necesito modificar Snake para agregar nuevo comportamiento. Primero debo entender el impacto en la arquitectura ECS...",
  nextThoughtNeeded: true,
  thoughtNumber: 1,
  totalThoughts: 5
})

// PASO 2: Knowledge Graph - Consultar contexto
const snakeEntity = await mcp_memory_aim_open_nodes({
  names: ["Snake", "Position", "Velocity", "MovementSystem"]
})

// PASO 3: ADR Analysis - Validar arquitectura
const architecturalContext = await mcp_adr-analysis_get_architectural_context({
  filePath: "src/entities/Snake.ts",
  includeCompliance: true
})

// PASO 4: Implementar cambios (con toda la informaci√≥n)
// ... modificaciones al c√≥digo ...

// PASO 5: Actualizar Knowledge Graph
await mcp_memory_aim_add_observations({
  observations: [{
    entityName: "Snake",
    contents: ["A√±adido nuevo comportamiento X", "Mantiene compatibilidad ECS"]
  }]
})

// PASO 6: Sequential Thinking - Reflexi√≥n
mcp_sequential-thinking_sequentialthinking({
  thought: "Los cambios mantienen la arquitectura ECS, no degradan el rendimiento y est√°n documentados en el grafo de conocimiento",
  nextThoughtNeeded: false,
  thoughtNumber: 5,
  totalThoughts: 5
})

// PASO 7: ADR Analysis - Validaci√≥n final
await mcp_adr-analysis_compare_adr_progress({
  adrDirectory: "docs/adrs",
  deepCodeAnalysis: true
})
```

---

**üß† RECORDATORIO CR√çTICO TRIPLE**:

1. **Sequential Thinking**: OBLIGATORIO para an√°lisis complejo. Pensar primero, actuar despu√©s.
2. **Knowledge Graph**: Contiene TODO el contexto del proyecto. Consultarlo SIEMPRE.
3. **ADR Analysis**: Validar impacto arquitect√≥nico ANTES de cambios significativos.
4. **Supabase MCP**: Validar esquema y queries ANTES de modificar base de datos.

**El conocimiento est√° persistido y debe ser la fuente de verdad para entender el impacto de cualquier cambio en la arquitectura ECS y los servicios del proyecto.**

**NO MODIFICAR SIN COMPLETAR EL CHECKLIST MCP OBLIGATORIO EXPANDIDO.**

