---
description: Regla de integraci√≥n MCP para ReSnake - uso del grafo de conocimiento y an√°lisis arquitect√≥nico
globs: **/*
alwaysApply: true
---

# Integraci√≥n MCP - Proyecto ReSnake

## üß† MCP KNOWLEDGE GRAPH - USO OBLIGATORIO

### Contexto Persistente Activo
**ANTES de hacer cualquier modificaci√≥n, SIEMPRE consultar:**

```typescript
// ‚úÖ OBLIGATORIO: Consultar entidades relacionadas
mcp_memory_aim_search_nodes({query: "Snake"})
mcp_memory_aim_open_nodes({names: ["GameEngine", "ECS_Architecture"]})

// ‚úÖ OBLIGATORIO: Verificar relaciones antes de cambios
mcp_memory_aim_read_graph({})
```

### Entidades del Grafo de Conocimiento (29 entidades)
**SIEMPRE considerar estas entidades en el an√°lisis:**

#### Entidades Principales
- **ReSnake** (proyecto principal)
- **GameEngine** (motor del juego)
- **Snake** (entidad principal)
- **Food** (entidad de comida)

#### Sistemas ECS
- **InputSystem, MovementSystem, CollisionSystem, RenderSystem**

#### Componentes ECS
- **Position, Velocity, Renderable, Collidable**

#### Servicios
- **ThemeService, ScoreService, LeaderboardService, SoundService**
- **I18nService, RomanticEasterEggService, UserService**
- **GameModeService, MenuService, LogoService**

#### Tecnolog√≠as
- **TypeScript, Vite, Canvas_API, Supabase, GitHub_Pages**

#### Patrones y Principios
- **ECS_Architecture, SOLID_Principles**
- **Mobile_Support, Game_Modes**

## üîó RELACIONES CR√çTICAS (44 relaciones)

### Relaciones Principales a Considerar
```typescript
// ‚úÖ OBLIGATORIO: Entender estas relaciones antes de modificar
ReSnake ‚Üí GameEngine (contains)
ReSnake ‚Üí Snake (contains)
ReSnake ‚Üí Food (contains)
GameEngine ‚Üí InputSystem (manages)
GameEngine ‚Üí MovementSystem (manages)
GameEngine ‚Üí CollisionSystem (manages)
GameEngine ‚Üí RenderSystem (manages)
Snake ‚Üí Position (uses)
Snake ‚Üí Velocity (uses)
Snake ‚Üí Renderable (uses)
Snake ‚Üí Collidable (uses)
```

### Relaciones de Servicios
```typescript
// ‚úÖ OBLIGATORIO: Considerar impacto en servicios
ScoreService ‚Üí MovementSystem (influences)
LeaderboardService ‚Üí Supabase (connects_to)
ThemeService ‚Üí RenderSystem (affects)
I18nService ‚Üí RenderSystem (provides_text_for)
RomanticEasterEggService ‚Üí RenderSystem (enhances)
RomanticEasterEggService ‚Üí ScoreService (monitors)
```

## üìä AN√ÅLISIS ARQUITECT√ìNICO MCP

### Puntuaci√≥n del Proyecto: 9/10
**SIEMPRE mantener esta puntuaci√≥n:**
- **Dise√±o**: Excelente (ECS bien implementado)
- **Tecnolog√≠as**: Modernas y apropiadas
- **Mantenibilidad**: Muy buena
- **Rendimiento**: Excelente
- **Seguridad**: Buena
- **Escalabilidad**: Muy buena

### M√©tricas Cr√≠ticas
- **Build Size**: ~8KB (gzipped) - NO EXCEDER
- **Entidades en Grafo**: 29
- **Relaciones**: 44
- **ADRs**: 5 Architectural Decision Records

## üéØ CONSULTAS MCP OBLIGATORIAS

### Antes de Modificar Cualquier Archivo
```typescript
// 1. Consultar entidades relacionadas
const relatedEntities = await mcp_memory_aim_search_nodes({
  query: "nombre_del_componente_o_servicio"
});

// 2. Abrir entidades espec√≠ficas
const entities = await mcp_memory_aim_open_nodes({
  names: ["GameEngine", "ECS_Architecture", "SOLID_Principles"]
});

// 3. Leer grafo completo para contexto
const fullGraph = await mcp_memory_aim_read_graph({});
```

### Antes de Agregar Nueva Funcionalidad
```typescript
// 1. Buscar patrones existentes
const patterns = await mcp_memory_aim_search_nodes({
  query: "patr√≥n_a_implementar"
});

// 2. Verificar compatibilidad con arquitectura ECS
const ecsInfo = await mcp_memory_aim_open_nodes({
  names: ["ECS_Architecture", "SOLID_Principles"]
});
```

## üìö ADRS (ARCHITECTURAL DECISION RECORDS)

### ADRs Documentados - SIEMPRE CONSULTAR
1. **ADR-001**: Implementaci√≥n de Arquitectura ECS
2. **ADR-002**: Configuraci√≥n Estricta de TypeScript
3. **ADR-003**: Vite como Sistema de Build
4. **ADR-004**: Canvas API para Renderizado
5. **ADR-005**: Supabase para Leaderboard Global

### Proceso para Nuevas Decisiones
```typescript
// ‚úÖ OBLIGATORIO: Para cambios arquitect√≥nicos significativos
// 1. Consultar ADRs existentes
// 2. Evaluar impacto en arquitectura ECS
// 3. Documentar nueva decisi√≥n como ADR
// 4. Actualizar grafo de conocimiento
```

## üîç AN√ÅLISIS MCP AUTOM√ÅTICO

### Comandos de An√°lisis
```bash
# ‚úÖ OBLIGATORIO: Health check antes de cambios
npx mcp-adr-analysis-server --test

# ‚úÖ OBLIGATORIO: An√°lisis completo del proyecto
PROJECT_PATH=C:\Users\Roy\Downloads\ReSnake npx mcp-adr-analysis-server

# ‚úÖ OBLIGATORIO: Configuraci√≥n del servidor
PROJECT_PATH=C:\Users\Roy\Downloads\ReSnake
ADR_DIRECTORY=docs/adrs
LOG_LEVEL=INFO
CACHE_ENABLED=true
```

### Cache y Performance
- **Cache Directory**: .mcp-adr-cache
- **Max Cache Size**: 100MB
- **Analysis Timeout**: 30000ms
- **Cache Enabled**: true (por defecto)

## üéÆ CONTEXTO ESPEC√çFICO DEL JUEGO

### Funcionalidades Cr√≠ticas en el Grafo
```typescript
// ‚úÖ OBLIGATORIO: Preservar estas funcionalidades
const criticalFeatures = [
  "RomanticEasterEggService", // Easter Egg en puntuaci√≥n 69
  "Mobile_Support", // Soporte m√≥vil completo
  "Game_Modes", // M√∫ltiples modos de juego
  "Canvas_API", // Renderizado de alto rendimiento
  "Supabase", // Leaderboard global
  "GitHub_Pages" // Deploy autom√°tico
];
```

### Easter Egg Rom√°ntico - FUNCIONALIDAD CR√çTICA
```typescript
// ‚úÖ OBLIGATORIO: Preservar Easter Egg
// Entidad: RomanticEasterEggService
// Activaci√≥n: Puntuaci√≥n 69 en modo cl√°sico
// Efectos: Lluvia de corazones, mensajes especiales
// Relaciones: enhance RenderSystem, monitor ScoreService
```

## üîß INTEGRACI√ìN CON SERVICIOS MCP

### Servidores MCP Activos
```json
{
  "mcpServers": {
    "memory": {
      "command": "npx",
      "args": ["-y", "mcp-knowledge-graph", "--memory-path", "C:\\Users\\Roy\\.aim\\"]
    },
    "mind-map": {
      "command": "npx", 
      "args": ["-y", "mind-map-mcp"]
    },
    "adr-analysis": {
      "command": "npx",
      "args": ["-y", "mcp-adr-analysis-server"]
    }
  }
}
```

### Flujo de Trabajo MCP
1. **Consultar grafo de conocimiento** antes de cambios
2. **Analizar impacto arquitect√≥nico** con ADR server
3. **Actualizar conocimiento** despu√©s de cambios significativos
4. **Validar decisiones** contra ADRs existentes

## üìä M√âTRICAS DE CONOCIMIENTO

### Entidades por Tipo
- **project**: 1 (ReSnake)
- **core_system**: 1 (GameEngine)
- **entity**: 2 (Snake, Food)
- **system**: 4 (Input, Movement, Collision, Render)
- **service**: 11 (todos los servicios)
- **component**: 4 (Position, Velocity, Renderable, Collidable)
- **technology**: 4 (TypeScript, Vite, Canvas_API, Supabase)
- **deployment**: 1 (GitHub_Pages)
- **architecture_pattern**: 1 (ECS_Architecture)
- **design_principles**: 1 (SOLID_Principles)
- **feature**: 2 (Mobile_Support, Game_Modes)

### Observaciones por Entidad
- **ReSnake**: 20 observaciones (proyecto principal)
- **GameEngine**: 11 observaciones (motor cr√≠tico)
- **Snake**: 11 observaciones (entidad principal)
- **ECS_Architecture**: 9 observaciones (patr√≥n fundamental)
- **SOLID_Principles**: 9 observaciones (principios de dise√±o)

## ‚ö†Ô∏è REGLAS DE USO MCP

### Obligatorio ANTES de Modificar C√≥digo
1. **Consultar entidades relacionadas** en el grafo
2. **Verificar relaciones** que pueden verse afectadas
3. **Revisar ADRs** para decisiones arquitect√≥nicas
4. **Analizar impacto** en la puntuaci√≥n del proyecto (9/10)

### Obligatorio DESPU√âS de Cambios Significativos
1. **Actualizar observaciones** de entidades modificadas
2. **Crear nuevas relaciones** si es necesario
3. **Documentar decisiones** como ADR si es arquitect√≥nico
4. **Ejecutar an√°lisis MCP** para validar cambios

### Prohibido
- ‚ùå Modificar c√≥digo sin consultar el grafo de conocimiento
- ‚ùå Ignorar relaciones existentes entre entidades
- ‚ùå Romper la arquitectura ECS documentada
- ‚ùå Disminuir la puntuaci√≥n del proyecto (9/10)

## üéØ CHECKLIST MCP OBLIGATORIO

### Pre-Modificaci√≥n
- [ ] ‚úÖ Consult√© el grafo de conocimiento
- [ ] ‚úÖ Identifiqu√© entidades relacionadas
- [ ] ‚úÖ Verifiqu√© relaciones que se ver√°n afectadas
- [ ] ‚úÖ Revis√© ADRs relevantes
- [ ] ‚úÖ Analic√© impacto arquitect√≥nico

### Post-Modificaci√≥n
- [ ] ‚úÖ Actualic√© observaciones en el grafo
- [ ] ‚úÖ Cre√© nuevas relaciones si es necesario
- [ ] ‚úÖ Document√© decisiones arquitect√≥nicas
- [ ] ‚úÖ Ejecut√© an√°lisis MCP de validaci√≥n
- [ ] ‚úÖ Mantuve puntuaci√≥n del proyecto (9/10)

---

**üß† RECORDATORIO CR√çTICO**: El MCP Knowledge Graph contiene TODO el contexto del proyecto ReSnake. SIEMPRE consultarlo antes de cualquier modificaci√≥n. El conocimiento est√° persistido y debe ser la fuente de verdad para entender el impacto de cualquier cambio en la arquitectura ECS y los servicios del proyecto.

